const INVISIBLES = new Set([
  "\u200B","\u200C","\u200D","\u200E","\u200F",
  "\u202A","\u202B","\u202C","\u202D","\u202E",
  "\u2066","\u2067","\u2068","\u2069","\u2060",
  "\u00AD","\u180E","\uFEFF"
]);

const CONTROL_RE = /[\u0000-\u001F\u007F]/g;
const HTML_TAG_RE = /<(script|style)[\s\S]*?<\/\1>|<[^>]+>/gis;
const MD_FENCE_RE = /^```[\s\S]*?^```$/gm;
const MD_INLINE_RE = /(`[^`]*`)|(\*\*?|__?|~~|>\s)/gm;

function isTagChar(ch){ const cp=ch.codePointAt(0); return cp>=0xE0000 && cp<=0xE007F; }
function isVS(ch, keepEmoji=false, keepAll=false){
  const cp = ch.codePointAt(0);
  if (keepAll) return false;
  if (keepEmoji && (cp===0xFE0E || cp===0xFE0F)) return false;
  return (cp>=0xFE00 && cp<=0xFE0F) || (cp>=0xE0100 && cp<=0xE01EF);
}
function isNonCharacter(ch){
  const cp = ch.codePointAt(0);
  if (cp>=0xFDD0 && cp<=0xFDEF) return true;
  return (cp & 0xFFFF)===0xFFFE || (cp & 0xFFFF)===0xFFFF;
}
function isPrivateUse(ch, scope){
  const cp = ch.codePointAt(0);
  if (scope==="none") return false;
  if (cp>=0xE000 && cp<=0xF8FF) return true;
  if (scope==="all" && ((cp>=0xF0000 && cp<=0xFFFFD) || (cp>=0x100000 && cp<=0x10FFFD))) return true;
  return false;
}

function stripMarkup(text, m){
  if (m.html_xml){ text = text.replace(HTML_TAG_RE," "); text = text.replace(/&(#\d+|#x[0-9A-Fa-f]+|\w+);/g, s => { 
    const e = document ? document.createElement("textarea") : null;
    if (!e) return s; e.innerHTML = s; return e.textContent;
  }); }
  if (m.code_fences) text = text.replace(MD_FENCE_RE, " ");
  if (m.markdown){
    text = text.replace(MD_INLINE_RE, " ");
    text = text.replace(/!\[[^\]]*\]\([^)]+\)/g, " ");
    text = text.replace(/\[([^\]]*)\]\([^)]+\)/g, "$1");
  }
  return text;
}

function collapseWS(s){
  return s.replace(/[ \t\r\f\v]+/g," ").replace(/\s*\n\s*/g,"\n").trim();
}

function sanitize(text, profile, lang){
  if (profile.strip_markup && (profile.strip_markup.html_xml || profile.strip_markup.markdown)){
    text = stripMarkup(text, profile.strip_markup);
  }

  // Normalization: best effort in JS; relies on ICU support
  text = profile.nfkc_compat ? text.normalize("NFKC") : text.normalize(profile.normalize || "NFC");

  const langAllow = new Set((profile.language_overrides?.[lang||""]?.allow)||[]);
  const hardAllow = new Set(profile.hard_allowlist||[]);
  const allow = new Set([...langAllow, ...hardAllow]);

  const keepEmojiVS = profile.strip_variation_selectors === "emoji_safekeep";
  const keepAllVS   = profile.strip_variation_selectors === "none";

  let out = [];
  for (const ch of text){
    if (allow.has(ch)) { out.push(ch); continue; }

    if (profile.remove_categories?.Cc_controls && CONTROL_RE.test(ch)) { continue; }
    CONTROL_RE.lastIndex = 0; // reset

    if (profile.strip_bom_anywhere && ch === "\uFEFF") { continue; }

    if (profile.remove_categories?.Cf_format_controls && /\p{Cf}/u.test(ch)) {
      if (allow.has(ch)) out.push(ch);
      continue;
    }

    if (profile.strip_invisible_separators && INVISIBLES.has(ch) && !allow.has(ch)) continue;
    if (profile.strip_soft_hyphen_discretionary && ch === "\u00AD") continue;
    if (profile.strip_tag_chars && isTagChar(ch)) continue;
    if ((profile.strip_variation_selectors === "all" || profile.strip_variation_selectors === "emoji_safekeep") && isVS(ch, keepEmojiVS, keepAllVS)) continue;
    if (profile.remove_noncharacters && isNonCharacter(ch)) continue;
    if (isPrivateUse(ch, profile.remove_private_use || "all")) continue;

    out.push(ch);
  }
  text = out.join("");

  if (profile.strip_directionality_controls){
    text = text.replace(/[\u200E\u200F\u202A-\u202E\u2066-\u2069]/g, "");
  }

  if (profile.remove_isolated_combining_marks){
    // crude but effective: drop marks not following a base
    text = text.replace(/(^|[^\p{L}\p{N}])\p{M}+/gu, (m, p1) => p1);
  }

  if (profile.collapse_whitespace) text = collapseWS(text);
  return text.normalize(profile.normalize || "NFC");
}
